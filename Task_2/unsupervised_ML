# -*- coding: utf-8 -*-
"""Task2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Knm-xPw5FB3pYSXddeIRZ6Axm9i4HoEA

**Name- Rucha Ravindra Ratnaparkhi**

TSF Internship Data Science and Business Analytics

**Task 2: Prediction using unsupervised ML** :
From the given 'Iris' dataset,predicting the optimum number of clusters and representing it visually using unsupervised ML.

**Importing required libraries**
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from sklearn import datasets

"""**Loading the dataset**"""

url='https://bit.ly/3kXTdox'
iris = datasets.load_iris()
iris

iris_df = pd.DataFrame(iris.data, columns = iris.feature_names)       #converting data into a DataFrame
iris_df.head()

iris_df.tail()

iris_df.shape

"""Checking for Null and Categorical Data"""

iris_df.isnull().sum()

iris_df.info()

iris_df.describe()

"""#**Visualizing the Data**"""

#plotting the pairwise plot of multiple features(variables) in a grid format
sns.pairplot(data=iris_df)

"""**Clustering using K-means**"""

# Finding the optimum number of clusters for k-means classification

x = iris_df.iloc[:, [0, 1, 2, 3]].values

from sklearn.cluster import KMeans
wcss = []              #Array that will store 'Within Cluster Sum of Squares' for all 10 values of k


#We are taking number of Clusters ranging from 1 to 10
for i in range(1, 11):
    kmeans = KMeans(n_clusters = i, init = 'k-means++', 
                    max_iter = 300, n_init = 10, random_state = 0)
    kmeans.fit(x)
    wcss.append(kmeans.inertia_)
    
#To find optimum k value, we are using elbow method.Plotting line graph to observe the elbow

plt.plot(range(1, 11), wcss,marker='o')
plt.title('The elbow method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')  # Within cluster sum of squares
plt.show()

"""**Model Training**"""

# Applying kmeans for k=3
kmeans = KMeans(n_clusters = 3, init = 'k-means++',
                max_iter = 300, n_init = 10, random_state = 0)
y_kmeans = kmeans.fit_predict(x)

"""**`Cluster Visualization of Sepal length and its width**"""

# Visualising the clusters on first 2 columns
plt.figure()
plt.scatter(x[y_kmeans == 0, 0], x[y_kmeans == 0, 1], 
             c = 'red', label = 'Iris-setosa')
plt.scatter(x[y_kmeans == 1, 0], x[y_kmeans == 1, 1], 
             c = 'blue', label = 'Iris-versicolour')
plt.scatter(x[y_kmeans == 2, 0], x[y_kmeans == 2, 1],
             c = 'green', label = 'Iris-virginica')

# Plotting the centroids of the clusters
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:,1], 
             c = 'yellow', label = 'Centroids')

plt.legend(loc='upper right')
plt.xlabel('Sepal length')
plt.ylabel('Sepal width')
plt.show()

"""**Similarly,cluster visualization of Petal length and its width**"""

plt.figure()
plt.scatter(x[y_kmeans == 0, 2], x[y_kmeans == 0, 3], 
            c = 'red', label = 'Iris-setosa')
plt.scatter(x[y_kmeans == 1, 2], x[y_kmeans == 1, 3], 
            c = 'blue', label = 'Iris-versicolour')
plt.scatter(x[y_kmeans == 2, 2], x[y_kmeans == 2, 3],
            c = 'green', label = 'Iris-virginica')

# Plotting the centroids of the clusters
plt.scatter(kmeans.cluster_centers_[:, 2], kmeans.cluster_centers_[:,3], 
            c = 'yellow', label = 'Centroids')

plt.legend()
plt.xlabel('Petal length')
plt.ylabel('Petal width')
plt.show()

"""**Conclusion: Thus,it is observed that predicted number of clusters are equal to the number of clusters found by visualizing the same data i.e.3.**

#**Thankyou**
"""
